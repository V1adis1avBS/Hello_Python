«Условные конструкции. Операции сравнения»

1. Напишите программу, которая проверяет возраст пользователя (переменная age) и выводит сообщение «Доступ разрешён»,
если возраст больше или равен 18, и «Доступ запрещён», если возраст меньше 18.



def check_age(age: int):

    if age >= 18: # Введите условие для проверки возраста
        result = 'Доступ разрешён'
    else:
        result = 'Доступ запрещён'

    return result

if __name__ == '__main__':
    # Этот код менять не нужно
    auth = check_age(10)
    assert auth == 'Доступ запрещён', f'Получен неверный ответ: {auth}'
    print('Возраст 10:', auth)

    auth = check_age(20)
    assert auth == 'Доступ разрешён',  f'Получен неверный ответ: {auth}'
    print('Возраст 20:', auth)


2. Напишите программу, которая проверяет логин (переменная login) и пароль (переменная password) пользователя.
Если логин равен “admin” и пароль равен “password”, выведите сообщение «Добро пожаловать», иначе выведите сообщение «Доступ ограничен».


def check_auth(login: str, password: str):

    if (login == 'admin') and (password == 'password'): # Здесь напишите свой код для проверки условия
        result = 'Добро пожаловать' # В этом блоке напишите код, который выполнится, если условие True. Используйте result, как в задании выше
    else:
        result = 'Доступ ограничен' # В этом блоке напишите код, который выполнится, если условие False. Используйте result, как в задании выше

    return result


if __name__ == '__main__':
    auth = check_auth('user', 'password')
    assert auth == 'Доступ ограничен', f'Получен неверный ответ: {auth}'
    print('Неверный login:', auth)

    auth = check_auth('admin', '123')
    assert auth == 'Доступ ограничен', f'Получен неверный ответ: {auth}'
    print('Неверный password:', auth)

    auth = check_auth('admin', 'password')
    assert auth == 'Добро пожаловать', f'Получен неверный ответ: {auth}'
    print('Верные login, password:', auth)


3. Напишите программу, которая проверяет вес посылки пользователя в килограммах (переменная weight). Если вес не превышает 10 кг,
выведите сообщение “Стоимость доставки: 200 руб.”. Если вес больше 10 кг, выведите сообщение “Стоимость доставки: 500 руб.”.


def get_cost(weight: int):
    if weight <= 10:
        result = 'Стоимость доставки: 200 руб.'
    else:
        result = 'Стоимость доставки: 500 руб.'

    return result
    
if __name__ == '__main__':
    # Этот код менять не надо
    delivery = get_cost(9)
    assert '200' in delivery, "Стоимость доставки должна быть 200 руб. если вес 9 кг"
    print('Вес посылки 9 кг', delivery)
    delivery = get_cost(12)
    assert '500' in delivery, "Стоимость доставки должна быть 500 руб. если вес 12 кг"
    print('Вес посылки 12 кг', delivery)


4. Напишите программу, которая проверяет длины трёх сторон треугольника (side1, side2, side3) и определяет его тип: “Равносторонний треугольник”,
“Равнобедренный треугольник” или “Разносторонний треугольник”. В случае некорректных величин значения сторон (0 или отрицательное значение),
вывод должен быть – “Треугольник не существует”.

Равнобедренный треугольник – треугольник, у которого две стороны равны.
Равносторонний треугольник – треугольник, у которого все стороны равны.
У треугольника сумма любых двух сторон должна быть больше третьей. Иначе треугольника не получится.

  
def check_triangle(side1: int, side2: int, side3: int):

    if (side1 + side2 <= side3 or side1 + side3 <= side2 or side3 + side2 <= side1) or (side1 <= 0 or side2 <= 0 or side3 <= 0):
        result = "Треугольник не существует"
    elif (side1  == side2  == side3):
        result = "Равносторонний треугольник"
    elif side1 == side2 or side2 == side3 or side3 == side1:
        result = "Равнобедренный треугольник"
    else :
        result = "Разносторонний треугольник"

    return result

if __name__ == '__main__':
    # Этот код менять не надо
    triangle = check_triangle(10, 10, 10)
    assert triangle == 'Равносторонний треугольник', f"Получен неверный ответ: {triangle}"
    print("Треугольник со сторонами 10, 10, 10:", triangle)
    triangle = check_triangle(10, 20, 30)
    assert triangle == "Треугольник не существует", f"Получен неверный ответ: {triangle}"
    print("Треугольник со сторонами 10, 20, 30:", triangle)
    triangle = check_triangle(10, 10, 20)
    assert check_triangle(10, 10, 20) == "Треугольник не существует", f"Получен неверный ответ: {triangle}"
    print("Треугольник со сторонами 10, 10, 20:", triangle)
    triangle = check_triangle(-10, 10, 20)
    assert triangle == 'Треугольник не существует', f"Получен неверный ответ: {triangle}"
    print("Треугольник со сторонами -10, 10, 20:", triangle)

5. Напишите программу, которая проверяет порядковый номер месяца в году (переменная month) и выводит сообщение с названием 
соответствующего сезона года: “Зима”, “Весна”, “Лето” или “Осень”. Если порядковый номер месяца выходит за пределы нумерации,
программа должна выдавать значение “Некорректный номер месяца”.


def check_month(month: int):
    if month == 1 or month == 2 or month == 12:
        result = 'Зима'
    elif month == 3 or month == 4 or month == 5:
        result = 'Весна'
    elif month == 6 or month == 7 or month == 8:
        result ='Лето'
    elif month == 9 or month == 10 or month == 11:
        result = 'Осень'
    else:
        result = 'Некорректный номер месяца'
    return result
if __name__ == '__main__':
    # Этот код менять не надо
    season = check_month(1)
    assert season == 'Зима', "Ответ должен быть Зима"
    print(f"1 месяц время года: {season}")
    season = check_month(4)
    assert season == 'Весна', "Ответ должен быть Весна"
    print(f"4 месяц время года: {season}")
    season = check_month(18)
    assert season == "Некорректный номер месяца", "Ответ должен быть 'Некорректный номер месяца'"
    print(f"18 месяц: {season}")
