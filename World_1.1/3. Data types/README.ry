« Введение в типы данных »

1. Будем считать адрес email корректным, если в нём есть символ @ и точки.
При этом отсутствуют пробелы. Напишите программу, которая будет проверять корректность адреса email.
На вход программе подаётся строка – адрес email. Программа должна вывести булево значение True, если
адрес email является корректным и False – в случае некорректного ввода адреса email.



def check_email(email: str) -> bool:
    if '@' in email:
        if '.' in email:
            if ' ' in email:
                result = False
            else :
                result = True
        else :
                result = False 
    else:
        result = False
    return result
if __name__ == '__main__':
    assert check_email('Helloworld@.ru') is True
    assert check_email('мояпочта@нетология.ру') is True
    assert check_email('python@email@net') is False
    assert check_email(' em@il.ru') is False
    print("\nОтличная работа, отправляйте на проверку!")


2. Даны названия трёх фильмов. Напишите программу, которая определяет самое длинное название фильма.
На вход программе подаётся названия трёх фильмов. Программа должна вернуть самое длинное название фильма.


def longest_film(film_1: str, film_2: str,film_3: str) -> str:

    if len(film_1) > len(film_2) > len(film_3):
        result = film_1
    elif len(film_3) > len(film_2) > len(film_1):
        result = film_3
    else:
        result = film_2
    return result

if __name__ == '__main__':
    assert longest_film('Аладин', 'Мадагаскар', 'Бетховен') == 'Мадагаскар'
    assert longest_film('Железный Человек', 'Стражи Галактики 2', 'Капитан Америка') == 'Стражи Галактики 2'
    assert longest_film('Бумер', 'Бумер: Фильм второй', 'Бумеранг') == 'Бумер: Фильм второй'
    assert longest_film('Гарри Поттер и философский камень', 'Пираты Карибского моря: На странных берегах',
                        'ВАЛЛ·И') == 'Пираты Карибского моря: На странных берегах'
    assert longest_film('Ирония судьбы, или С легким паром!', 'Иван Васильевич меняет профессию ',
                        'Джентльмены удачи а') == 'Ирония судьбы, или С легким паром!'
    print("\nОтличная работа, отправляйте на проверку!")


3. Программе на вход подаётся строка со спецсимволами %% и '&#' в начале и в конце строки.
Напишите программу, которая вернёт строку без спецсимволов.


def string_slices(string: str) -> str:

    result = string[2:-2]
    return result

if __name__ == '__main__':
    assert string_slices("%%Приказ об увольнении&#") == 'Приказ об увольнении'
    assert string_slices("%%Лучший студент на курсе!&#") == 'Лучший студент на курсе!'
    assert string_slices("%%Hello World!&#") == 'Hello World!'
    print("\nОтличная работа, отправляйте на проверку!")


4. На вход программе подаётся список из трёх строк: имя, фамилия и отчество. Напишите программу,
которая вернёт строкой первые буквы ФИО человека.


def fio(initials: List[str]) -> str:
    
    result = initials[0][0] + initials[1][0] + initials[2][0]
    return result


if __name__ == '__main__':
    assert fio(['Иванов', 'Иван', 'Иванович']) == 'ИИИ'
    assert fio(['Жан', 'Клот', 'Вандамович']) == 'ЖКВ'
    assert fio(['Павлов', 'Иван', 'Уралович']) == 'ПИУ'
    assert fio(['Семейный', 'Доминик', 'Торретович']) == 'СДТ'
    print("\nОтличная работа, отправляйте на проверку!")


5. На вход программе подаётся одно число n. Напишите программу, которая вернёт список [1, 2, 3, …, n].
На вход программе подаётся одно натуральное число. Программа должна вывести текст в соответствии с условием задачи.


def list_of_numbers(n: int) -> list:
    result = (list(range(1, n + 1)))
    return result


if __name__ == '__main__':
    assert list_of_numbers(1) == [1]
    assert list_of_numbers(5) == [1, 2, 3, 4, 5]
    assert list_of_numbers(9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
    print("\nОтличная работа, отправляйте на проверку!")


6. На вход программе подаётся строка. Напишите программу, которая вернёт строку,
переписанную в обратном порядке строчными символами.


def reverse(string: str) -> str:
    result = string[::-1].lower()
    return result

if __name__ == '__main__':
    assert reverse('!dlroW olleH') == 'hello world!'
    assert reverse('AvadaKedavraaaaA!') == '!aaaaarvadekadava'
    assert reverse('хаЗерс хишав ХИТЭ в ясларбозар от-ценокан Я') == 'я наконец-то разобрался в этих ваших срезах'
    print("\nОтличная работа, отправляйте на проверку!")

